from pathlib import Path
import asyncio
import logging
import sqlite3
import aiohttp
import feedparser
from datetime import datetime, timedelta
from calendar import monthrange

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "7558057961:AAHPEJr4dSEzbAC_G-VA880SyTBgt9qFgcQ"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("tasks.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    description TEXT,
    deadline TEXT,
    repeat TEXT DEFAULT '–Ω–∏–∫–æ–≥–¥–∞'
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    user_id INTEGER PRIMARY KEY,
    completed INTEGER DEFAULT 0,
    uncompleted INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS finances (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    category TEXT,
    description TEXT,
    date TEXT DEFAULT (strftime('%Y-%m-%d', 'now')))
""")
conn.commit()

# –ï—Å–ª–∏ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª—è —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã)
try:
    cursor.execute("ALTER TABLE tasks ADD COLUMN reminded INTEGER DEFAULT 0")
except sqlite3.OperationalError:
    pass


# FSM
class TaskStates(StatesGroup):
    waiting_description = State()
    waiting_deadline = State()
    waiting_repeat = State()
    waiting_edit_id = State()
    waiting_edit_field = State()
    waiting_edit_value = State()
    waiting_weather_city = State()
    waiting_task_completion = State()
    waiting_finance_amount = State()
    waiting_finance_category = State()
    waiting_finance_description = State()


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="‚ôªÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç"), KeyboardButton(text="üå¶Ô∏è –ü–æ–≥–æ–¥–∞")],
            [KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"), KeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã")]
        ],
        resize_keyboard=True
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
def get_finance_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçî –ï–¥–∞"), KeyboardButton(text="üè† –ñ–∏–ª—å–µ")],
        [KeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), KeyboardButton(text="üõçÔ∏è –ü–æ–∫—É–ø–∫–∏")],
        [KeyboardButton(text="üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), KeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="üì± –°–≤—è–∑—å")],
        [KeyboardButton(text="üîß –î—Ä—É–≥–æ–µ")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
repeat_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∫–æ–≥–¥–∞", callback_data="repeat_–Ω–∏–∫–æ–≥–¥–∞")],
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="repeat_–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_field_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton(text="–î–µ–¥–ª–∞–π–Ω", callback_data="edit_deadline")],
        [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä", callback_data="edit_repeat")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
completion_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="complete_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="complete_no")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
weather_cities_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", callback_data="weather_–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="weather_other")]
    ]
)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    cursor.execute("INSERT OR IGNORE INTO stats (user_id, completed, uncompleted) VALUES (?, 0, 0)",
                   (message.from_user.id,))
    conn.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_kb())


@dp.message(F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")
async def finances_menu(message: types.Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:", reply_markup=get_finance_kb())


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_start(message: types.Message, state: FSMContext):
    await state.set_state(TaskStates.waiting_finance_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(TaskStates.waiting_finance_amount)
async def process_expense_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await state.set_state(TaskStates.waiting_finance_category)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99)")


@dp.message(TaskStates.waiting_finance_category)
async def process_expense_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(TaskStates.waiting_finance_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=types.ReplyKeyboardRemove())


@dp.message(TaskStates.waiting_finance_description)
async def process_expense_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    description = message.text if message.text else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    cursor.execute(
        "INSERT INTO finances (user_id, amount, category, description) VALUES (?, ?, ?, ?)",
        (message.from_user.id, data["amount"], data["category"], description)
    )
    conn.commit()

    await message.answer(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        f"–°—É–º–º–∞: {data['amount']} ‚ÇΩ\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
        reply_markup=get_finance_kb()
    )
    await state.clear()


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def show_finance_stats(message: types.Message):
    current_month = datetime.now().strftime("%Y-%m")

    cursor.execute(
        "SELECT SUM(amount) FROM finances WHERE user_id = ? AND strftime('%Y-%m', date) = ?",
        (message.from_user.id, current_month)
    )
    total = cursor.fetchone()[0] or 0

    cursor.execute(
        "SELECT category, SUM(amount) FROM finances WHERE user_id = ? AND strftime('%Y-%m', date) = ? GROUP BY category",
        (message.from_user.id, current_month)
    )
    categories = cursor.fetchall()

    cursor.execute(
        "SELECT date, SUM(amount) FROM finances WHERE user_id = ? AND strftime('%Y-%m', date) = ? GROUP BY date",
        (message.from_user.id, current_month)
    )
    daily = cursor.fetchall()

    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {current_month}:\n\n"
    response += f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total:.2f} ‚ÇΩ\n\n"

    if categories:
        response += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for cat, amount in categories:
            response += f"  {cat}: {amount:.2f} ‚ÇΩ\n"

    if daily:
        response += "\n–ü–æ –¥–Ω—è–º:\n"
        for date, amount in daily:
            response += f"  {date}: {amount:.2f} ‚ÇΩ\n"

    await message.answer(response, reply_markup=get_finance_kb())


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await state.set_state(TaskStates.waiting_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(TaskStates.waiting_description)
async def get_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TaskStates.waiting_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")


@dp.message(TaskStates.waiting_deadline)
async def get_deadline(message: types.Message, state: FSMContext):
    try:
        deadline_dt = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        now = datetime.now()

        if deadline_dt < now:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º:")
            return

        await state.update_data(deadline=message.text)
        await state.set_state(TaskStates.waiting_repeat)
        await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=repeat_kb)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")



@dp.callback_query(F.data.startswith("repeat_"))
async def process_repeat(callback: types.CallbackQuery, state: FSMContext):
    repeat = callback.data.split("_")[1]
    data = await state.get_data()
    cursor.execute("INSERT INTO tasks (user_id, description, deadline, repeat) VALUES (?, ?, ?, ?)",
                   (callback.from_user.id, data["description"], data["deadline"], repeat))
    conn.commit()
    await callback.message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=get_main_kb())
    await state.clear()
    await callback.answer()


@dp.message(F.text == "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_tasks(message: types.Message):
    cursor.execute("SELECT id, description, deadline, repeat FROM tasks WHERE user_id = ?", (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        text = "\n".join([f"{i}. {t[1]} ‚Äî {t[2]} ({t[3]})" for i, t in enumerate(tasks, start=1)])
        await message.answer(text)


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message):
    cursor.execute("SELECT id, description FROM tasks WHERE user_id = ?", (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for i, task in enumerate(tasks, start=1):
        kb.inline_keyboard.append(
            [InlineKeyboardButton(text=f"{i}. {task[1]}", callback_data=f"delete_{task[0]}")]
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.callback_query(F.data.startswith("delete_"))
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    await state.update_data(task_id=task_id)
    await callback.message.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?", reply_markup=completion_kb)
    await state.set_state(TaskStates.waiting_task_completion)
    await callback.answer()


@dp.callback_query(F.data.startswith("complete_"), TaskStates.waiting_task_completion)
async def process_completion(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task_id = data["task_id"]
    is_completed = callback.data.split("_")[1] == "yes"

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    cursor.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, callback.from_user.id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ stats
    cursor.execute("SELECT 1 FROM stats WHERE user_id = ?", (callback.from_user.id,))
    exists = cursor.fetchone()

    if exists:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        if is_completed:
            cursor.execute("UPDATE stats SET completed = completed + 1 WHERE user_id = ?",
                           (callback.from_user.id,))
        else:
            cursor.execute("UPDATE stats SET uncompleted = uncompleted + 1 WHERE user_id = ?",
                           (callback.from_user.id,))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if is_completed:
            cursor.execute("INSERT INTO stats (user_id, completed, uncompleted) VALUES (?, 1, 0)",
                           (callback.from_user.id,))
        else:
            cursor.execute("INSERT INTO stats (user_id, completed, uncompleted) VALUES (?, 0, 1)",
                           (callback.from_user.id,))

    conn.commit()
    await callback.message.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_kb())
    await state.clear()
    await callback.answer()


@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
async def start_edit(message: types.Message, state: FSMContext):
    cursor.execute("SELECT id, description FROM tasks WHERE user_id = ?", (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for i, task in enumerate(tasks, start=1):
        kb.inline_keyboard.append(
            [InlineKeyboardButton(text=f"{i}. {task[1]}", callback_data=f"edit_task_{task[0]}")]
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@dp.callback_query(F.data.startswith("edit_task_"))
async def choose_field(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[2])
    await state.update_data(task_id=task_id)
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_field_kb)
    await state.set_state(TaskStates.waiting_edit_field)
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_"), TaskStates.waiting_edit_field)
async def get_edit_field(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(TaskStates.waiting_edit_value)
    await callback.answer()


@dp.message(TaskStates.waiting_edit_value)
async def apply_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data["task_id"]
    field = data["field"]
    value = message.text

    if field == "deadline":
        try:
            datetime.strptime(value, "%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

    if field == "repeat" and value.lower() not in ["–Ω–∏–∫–æ–≥–¥–∞", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"]:
        await message.answer("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: '–Ω–∏–∫–æ–≥–¥–∞' –∏–ª–∏ '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'")
        return

    cursor.execute(f"UPDATE tasks SET {field} = ? WHERE id = ? AND user_id = ?",
                   (value, task_id, message.from_user.id))
    conn.commit()
    await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=get_main_kb())
    await state.clear()


@dp.message(F.text == "‚ôªÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def show_weekly(message: types.Message):
    cursor.execute("SELECT description, deadline FROM tasks WHERE user_id = ? AND repeat = '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'",
                   (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        text = "\n".join([f"{t[0]} ‚Äî {t[1]}" for t in tasks])
        await message.answer(text)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    cursor.execute("SELECT completed, uncompleted FROM stats WHERE user_id = ?", (message.from_user.id,))
    stats = cursor.fetchone()
    completed = stats[0] if stats else 0
    uncompleted = stats[1] if stats else 0

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ?", (message.from_user.id,))
    current_tasks = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND repeat = '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'", (message.from_user.id,))
    weekly_tasks = cursor.fetchone()[0]

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:\n\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n"
        f"‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {uncompleted}\n"
        f"üìå –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {current_tasks}\n"
        f"‚ôªÔ∏è –ò–∑ –Ω–∏—Ö –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_tasks}"
    )
    await message.answer(response)


@dp.message(F.text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rate(message: types.Message):
    url = "https://open.er-api.com/v6/latest/RUB"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")
                    return
                data = await resp.json()
                rates = data.get("rates", {})
                if not all(k in rates for k in ["USD", "EUR", "CNY", "JPY"]):
                    await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç API –Ω–µ–ø–æ–ª–Ω—ã–µ.")
                    return

                usd = 1 / rates["USD"]
                eur = 1 / rates["EUR"]
                cny = 1 / rates["CNY"]
                jpy = 1 / rates["JPY"]

                await message.answer(
                    f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
                    f"üá∫üá∏ USD: {usd:.4f}\n"
                    f"üá™üá∫ EUR: {eur:.4f}\n"
                    f"üá®üá≥ CNY: {cny:.4f}\n"
                    f"üáØüáµ JPY: {jpy:.4f}"
                )
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
            print("Currency error:", e)


@dp.message(F.text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞")
async def weather(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=weather_cities_kb)


@dp.callback_query(F.data.startswith("weather_"))
async def weather_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_")[1]
    if city == "other":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await state.set_state(TaskStates.waiting_weather_city)
        await callback.answer()
        return

    await process_weather_request(callback.message, city)
    await callback.answer()


@dp.message(TaskStates.waiting_weather_city)
async def handle_custom_weather_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await process_weather_request(message, city)
    await state.clear()


async def process_weather_request(message: types.Message, city: str):
    url = f"https://wttr.in/{city}?format=3"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                text = await resp.text()
                await message.answer(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {text}", reply_markup=get_main_kb())
            else:
                await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_kb())


@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news(message: types.Message):
    feed = feedparser.parse("https://rssexport.rbc.ru/rbcnews/news/30/full.rss")
    entries = feed.entries[:3]
    response = "\n\n".join([f"üóû {e.title}\n{e.link}" for e in entries])
    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_kb())


async def reminder_loop():
    while True:
        now = datetime.now()
        next_hour = now + timedelta(hours=1)

        # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("""
            SELECT id, user_id, description FROM tasks
            WHERE reminded = 0 AND repeat = '–Ω–∏–∫–æ–≥–¥–∞' AND datetime(deadline) BETWEEN ? AND ?
        """, (now.strftime("%Y-%m-%d %H:%M"), next_hour.strftime("%Y-%m-%d %H:%M")))

        for task_id, user_id, desc in cursor.fetchall():
            try:
                await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ —á–∞—Å –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:\n<b>{desc}</b>",
                                       parse_mode="HTML")
                cursor.execute("UPDATE tasks SET reminded = 1 WHERE id = ?", (task_id,))
            except:
                continue

        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("""
            SELECT id, user_id, description FROM tasks
            WHERE repeat = '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' AND reminded = 0 AND strftime('%w %H:%M', deadline) = strftime('%w %H:%M', ?)
        """, (next_hour.strftime("%Y-%m-%d %H:%M"),))

        for task_id, user_id, desc in cursor.fetchall():
            try:
                await bot.send_message(user_id, f"üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ —á–∞—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞:\n<b>{desc}</b>",
                                       parse_mode="HTML")
                cursor.execute("UPDATE tasks SET reminded = 1 WHERE id = ?", (task_id,))
            except:
                continue

        # –û–±–Ω—É–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á, –¥–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–∞ (—á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ)
        cursor.execute("""
            UPDATE tasks SET reminded = 0 WHERE repeat = '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' AND datetime(deadline) < datetime('now')
        """)
        conn.commit()

        await asyncio.sleep(60)

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())